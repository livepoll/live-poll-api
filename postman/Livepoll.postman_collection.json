{
	"info": {
		"_postman_id": "3c5dd4db-9e4c-435a-b8fd-2a7a3dfcf778",
		"name": "Livepoll",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Account",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"\",\r\n    \"email\": \"\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/account/register",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"account",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Confirm",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/account/confirm?token=abc",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"account",
								"confirm"
							],
							"query": [
								{
									"key": "token",
									"value": "abc"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/account/logout",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"account",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const urlPollId =\"localhost:8080/v1/polls/\";\r",
									"pm.sendRequest(urlPollId, function(error, response){\r",
									"    let resBody = JSON.parse(new Buffer.from(response.stream).toString())\r",
									"    pm.globals.set(\"poll-id\", resBody[0].id)\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"poll-id\")\r",
									"pm.globals.unset(\"poll-item-id\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"postman\",\r\n    \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/account/login",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"account",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get user",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/user",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Poll",
			"item": [
				{
					"name": "Create poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.globals.set(\"poll-id\", pm.response.json().id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-poll\",\r\n    \"startDate\": \"1610705932\",\r\n    \"endDate\":\"1610705932\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/polls",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get polls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/polls",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get poll",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get poll items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}/poll-items",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}",
								"poll-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete poll",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update poll",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"update\",\r\n    \"startDate\": \"1610705932\",\r\n    \"endDate\":\"1610705932\",\r\n    \"slug\": \"1234\",\r\n    \"currentItem\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Next presentation item",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}/next-item",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}",
								"next-item"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Poll items",
			"item": [
				{
					"name": "Get poll item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/poll-items/{{poll-item-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"{{poll-item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create multiple choice item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"question\": \"postman-multiplechoice-question\",\r\n    \"selectionOptions\": [\"postman-multiplechoice-answer-1\", \"postman-multiplechoice-answer-2\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/multiple-choice",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"multiple-choice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update multiple choice item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"position\": 3,\r\n    \"question\": \"postman-multiplechoice-question-update\",\r\n    \"selectionOptions\": [\"postman-multiplechoice-answer-1-update\", \"postman-multiplechoice-answer-2-update\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/multiple-choice/{{poll-item-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"multiple-choice",
								"{{poll-item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create quiz item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"question\": \"postman-quiz-question\",\r\n    \"selectionOptions\": [ \"correct option\", \"wrong option\", \"wrong option\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/quiz",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"quiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quiz item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"position\": 1,\r\n    \"question\": \"postman-quiz-question-update\",\r\n    \"selectionOptions\": [ \"correct option update\", \"wrong option update\", \"wrong option update\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/quiz/{{poll-item-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"quiz",
								"{{poll-item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create open text item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"question\": \"postman-open-text-question\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/open-text",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"open-text"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update open text item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"position\": 2,\r\n    \"question\": \"postman-open-text-question update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/open-text/{{poll-item-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"open-text",
								"{{poll-item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete poll item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const url = \"localhost:8080/v1/poll-items/\" + pm.environment.get(\"poll-item-id\");\r",
									"pm.sendRequest(url, function(error, response){\r",
									"    pm.test(\"Poll item does not exist anymore\", function(){\r",
									"    pm.expect(response).to.have.property('code', 404)\r",
									"    pm.expect(response).to.have.property('status', 'Not Found')\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base-url}}/v1/poll-items/{{poll-item-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"{{poll-item-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Integration Test",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const cookies = pm.response.headers.all().filter(headerObj => headerObj.key === 'Set-Cookie').map(headerObj => headerObj.value);\r",
									"pm.environment.set('cookies', cookies.join(';'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.globals.unset(\"poll-id\")\r",
									"pm.globals.unset(\"poll-item-id\")\r",
									"pm.globals.unset(\"poll-item-id-multiple-choice\")\r",
									"pm.globals.unset(\"poll-item-id-open-text\")\r",
									"pm.globals.unset(\"poll-item-id-quiz\")\r",
									"pm.globals.unset(\"poll-items\")\r",
									"pm.globals.unset(\"poll-items-counter\")\r",
									"pm.globals.unset(\"cookies\")\r",
									"\r",
									"// Just for newman since we don't have our Livepoll Dev environment there\r",
									"pm.environment.set('base-url', 'http://localhost:8080');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"postman\",\r\n    \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/account/login",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"account",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/v1/user",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"pm.globals.set(\"poll-id\", pm.response.json().id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"postman-poll\",\r\n    \"startDate\": \"1610705932\",\r\n    \"endDate\":\"1610705932\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/polls",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get polls",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/v1/polls",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get poll",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create multiple choice item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Multiple choice item is at position 1\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.position).to.equal(1);\r",
									"});\r",
									"\r",
									"pm.globals.set(\"poll-item-id-multiple-choice\", pm.response.json().itemId);\r",
									"pm.globals.set(\"poll-item-id\", pm.response.json().itemId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"question\": \"postman-multiplechoice-question\",\r\n    \"selectionOptions\": [\"postman-multiplechoice-answer-1\", \"postman-multiplechoice-answer-2\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/multiple-choice",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"multiple-choice"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Quiz Item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Quiz item is at position 2\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.position).to.equal(2);\r",
									"});\r",
									"\r",
									"pm.globals.set(\"poll-item-id-quiz\", pm.response.json().itemId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"question\": \"postman-quiz-question\",\r\n    \"selectionOptions\": [ \"correct option\", \"wrong option\", \"wrong option\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/quiz",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"quiz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create open text item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Open text item is at position 3\", () => {\r",
									"    const response = pm.response.json();\r",
									"    pm.expect(response.position).to.equal(3);\r",
									"});\r",
									"\r",
									"pm.globals.set(\"poll-item-id-open-text\", pm.response.json().itemId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"question\": \"postman-open-text-question\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/open-text",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"open-text"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get poll items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.globals.set(\"poll-items\", pm.response.json()) \r",
									"pm.globals.set(\"poll-items-counter\", 1)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}/poll-items",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}",
								"poll-items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Next presentation item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"if(pm.response.text() == \"Poll over\"){\r",
									"    postman.setNextRequest(\"Get poll item\")\r",
									"}else{\r",
									"    postman.setNextRequest(\"Next presentation item\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}/next-item",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}",
								"next-item"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get poll item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"let currentItem = pm.globals.get(\"poll-items-counter\")\r",
									"let pollItems =  pm.globals.get(\"poll-items\")\r",
									"if( currentItem < pollItems.length){\r",
									"    pm.globals.set(\"poll-item-id\", pollItems[currentItem].itemId)\r",
									"    currentItem++\r",
									"    pm.globals.set(\"poll-items-counter\", currentItem)\r",
									"    postman.setNextRequest(\"Get poll item\")\r",
									"}else{\r",
									"    postman.setNextRequest(\"Update poll\")\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/v1/poll-items/{{poll-item-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"{{poll-item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"startDate\": \"1669892400000\",\r\n    \"endDate\":\"1669892400000\",\r\n    \"slug\": \"12345\",\r\n    \"currentItem\": \"{{poll-item-id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update multiple choice item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.environment.get('base-url');\r",
									"const pollId = pm.globals.get('poll-id');\r",
									"const cookies = pm.environment.get('cookies');\r",
									"\r",
									"// Poll item ids\r",
									"const multipleChoiceId = pm.globals.get('poll-item-id-multiple-choice');\r",
									"const quizId = pm.globals.get('poll-item-id-quiz');\r",
									"const openTextId = pm.globals.get('poll-item-id-open-text');\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// ---------------------- Position -------------------------------\r",
									"pm.test(\"Multiple choice item got moved from position 1 to position 3\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/polls/${pollId}/poll-items`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Cookie': cookies\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"\r",
									"        // Multiple choice item got moved from position 1 to position 3\r",
									"        pm.expect(response[0].itemId).to.equal(multipleChoiceId);\r",
									"        pm.expect(response[0].position).to.equal(3);\r",
									"\r",
									"        pm.expect(response[1].itemId).to.equal(quizId);\r",
									"        pm.expect(response[1].position).to.equal(1);\r",
									"\r",
									"        pm.expect(response[2].itemId).to.equal(openTextId);\r",
									"        pm.expect(response[2].position).to.equal(2);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// -------------------- Selection options  -------------------------------\r",
									"pm.test(\"Selection options that already exist are kept\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/poll-items/multiple-choice/${multipleChoiceId}`,\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Cookie': cookies,\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"pollId\": `${pollId}`,\r",
									"                \"question\": \"postman-multiplechoice-question-update\",\r",
									"                \"position\": 3,\r",
									"                \"selectionOptions\": [\"postman-multiplechoice-answer-1-update\", \"postman-multiplechoice-answer-2-update\"]\r",
									"            })\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"\r",
									"        // Selection option already existed and are kept\r",
									"        pm.expect(response.answers[0].selectionOption).to.equal(\"postman-multiplechoice-answer-1-update\");\r",
									"        pm.expect(response.answers[1].selectionOption).to.equal(\"postman-multiplechoice-answer-2-update\");\r",
									"        // TODO: test in conjunction with websockets to make sure that answer count also stays the same\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"New selection options are added (with initial answer count of 0)\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/poll-items/multiple-choice/${multipleChoiceId}`,\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Cookie': cookies,\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"pollId\": `${pollId}`,\r",
									"                \"question\": \"postman-multiplechoice-question-update\",\r",
									"                \"position\": 3,\r",
									"                \"selectionOptions\": [\"new-option\", \"postman-multiplechoice-answer-1-update\", \"postman-multiplechoice-answer-2-update\"]\r",
									"            })\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"\r",
									"        // New selection option is added at the end\r",
									"        pm.expect(response.answers[0].selectionOption).to.equal(\"postman-multiplechoice-answer-1-update\");\r",
									"        pm.expect(response.answers[1].selectionOption).to.equal(\"postman-multiplechoice-answer-2-update\");\r",
									"        pm.expect(response.answers[2].selectionOption).to.equal(\"new-option\"); // was first item in the request body selectionOptions\r",
									"\r",
									"        // Initial answer count must equal 0\r",
									"        pm.expect(response.answers[2].answerCount).to.equal(0)\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Selection option that existed in database but not anymore in update is removed\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/poll-items/multiple-choice/${multipleChoiceId}`,\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Cookie': cookies,\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"pollId\": `${pollId}`,\r",
									"                \"question\": \"postman-multiplechoice-question-update\",\r",
									"                \"position\": 3,\r",
									"                \"selectionOptions\": [\"postman-multiplechoice-answer-1-update\", \"postman-multiplechoice-answer-2-update\"]\r",
									"            })\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"\r",
									"        // New selection option is removed and correct answer updated\r",
									"        pm.expect(response.answers[0].selectionOption).to.equal(\"postman-multiplechoice-answer-1-update\");\r",
									"        pm.expect(response.answers[1].selectionOption).to.equal(\"postman-multiplechoice-answer-2-update\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"question\": \"postman-multiplechoice-question-update\",\r\n    \"position\": 3,\r\n    \"selectionOptions\": [\"postman-multiplechoice-answer-1-update\", \"postman-multiplechoice-answer-2-update\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/multiple-choice/{{poll-item-id-multiple-choice}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"multiple-choice",
								"{{poll-item-id-multiple-choice}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update quiz item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const baseUrl = pm.environment.get('base-url');\r",
									"const pollId = pm.globals.get('poll-id');\r",
									"const cookies = pm.environment.get('cookies');\r",
									"\r",
									"// Poll item ids\r",
									"const multipleChoiceId = pm.globals.get('poll-item-id-multiple-choice');\r",
									"const quizId = pm.globals.get('poll-item-id-quiz');\r",
									"const openTextId = pm.globals.get('poll-item-id-open-text');\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// ---------------------- Position -------------------------------\r",
									"pm.test(\"Quiz item stays at position 1\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/polls/${pollId}/poll-items`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            'Cookie': cookies\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"\r",
									"        // Quiz item stays at position 1\r",
									"        pm.expect(response[0].itemId).to.equal(multipleChoiceId);\r",
									"        pm.expect(response[0].position).to.equal(3);\r",
									"\r",
									"        pm.expect(response[1].itemId).to.equal(quizId);\r",
									"        pm.expect(response[1].position).to.equal(1);\r",
									"\r",
									"        pm.expect(response[2].itemId).to.equal(openTextId);\r",
									"        pm.expect(response[2].position).to.equal(2);\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// -------------------- Selection options  -------------------------------\r",
									"pm.test(\"Selection options that already exist are kept\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/poll-items/quiz/${quizId}`,\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Cookie': cookies,\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"pollId\": `${pollId}`,\r",
									"                \"question\": \"postman-quiz-question-update\",\r",
									"                \"position\": 1,\r",
									"                \"selectionOptions\": [ \"correct option update\", \"wrong option update\", \"wrong option update2\"]\r",
									"            })\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"\r",
									"        // Selection option already existed and are kept\r",
									"        pm.expect(response.answers[0].selectionOption).to.equal(\"correct option update\");\r",
									"        pm.expect(response.answers[0].isCorrect).to.be.true;\r",
									"        pm.expect(response.answers[1].selectionOption).to.equal(\"wrong option update\");\r",
									"        pm.expect(response.answers[1].isCorrect).to.be.false;\r",
									"        pm.expect(response.answers[2].selectionOption).to.equal(\"wrong option update2\");\r",
									"        pm.expect(response.answers[2].isCorrect).to.be.false;\r",
									"        // TODO: test in conjunction with websockets to make sure that answer count also stays the same\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"New selection options are added (with initial answer count of 0)\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/poll-items/quiz/${quizId}`,\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Cookie': cookies,\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"               \"pollId\": `${pollId}`,\r",
									"                \"question\": \"postman-quiz-question-update\",\r",
									"                \"position\": 1,\r",
									"                \"selectionOptions\": [ \"correct option update\", \"wrong option update\", \"new wrong option\", \"wrong option update2\"]\r",
									"            })\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"\r",
									"        // New selection option is added (at the end, but no order is guaranteed!)\r",
									"        pm.expect(response.answers[0].selectionOption).to.equal(\"correct option update\");\r",
									"        pm.expect(response.answers[0].isCorrect).to.be.true;\r",
									"        pm.expect(response.answers[1].selectionOption).to.equal(\"wrong option update\");\r",
									"        pm.expect(response.answers[1].isCorrect).to.be.false;\r",
									"        pm.expect(response.answers[2].selectionOption).to.equal(\"wrong option update2\");\r",
									"        pm.expect(response.answers[2].isCorrect).to.be.false;\r",
									"        pm.expect(response.answers[3].selectionOption).to.equal(\"new wrong option\");\r",
									"        pm.expect(response.answers[3].isCorrect).to.be.false;\r",
									"\r",
									"        // Initial answer count must equal 0\r",
									"        pm.expect(response.answers[3].answerCount).to.equal(0)\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Selection option that existed in database but not anymore in update is removed\", () => {\r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/poll-items/quiz/${quizId}`,\r",
									"        method: 'PUT',\r",
									"        header: {\r",
									"            'Cookie': cookies,\r",
									"            'Content-Type': 'application/json'\r",
									"        },\r",
									"        body: {\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify({\r",
									"                \"pollId\": `${pollId}`,\r",
									"                \"question\": \"postman-quiz-question-update\",\r",
									"                \"position\": 1,\r",
									"                \"selectionOptions\": [\"wrong option update\", \"new wrong option\", \"wrong option update2\"]\r",
									"            })\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"        \r",
									"        // First option is removed. As the first item should always represent the correct option\r",
									"        // a new item is the correct option now (only possible since the \"correct option update\" had an answer count of 0)\r",
									"        // Sorted according to their ids:\r",
									"        pm.expect(response.answers.length).to.be.equal(3); // only three elements left\r",
									"        pm.expect(response.answers[0].selectionOption).to.equal(\"wrong option update\");\r",
									"        pm.expect(response.answers[0].isCorrect).to.be.true;\r",
									"        pm.expect(response.answers[1].selectionOption).to.equal(\"wrong option update2\");\r",
									"        pm.expect(response.answers[1].isCorrect).to.be.false;\r",
									"        pm.expect(response.answers[2].selectionOption).to.equal(\"new wrong option\");\r",
									"        pm.expect(response.answers[2].isCorrect).to.be.false;\r",
									"    });\r",
									"});\r",
									"\r",
									"// TODO: have an item with answer count > 0 and test\r",
									"// 1) selection option is kept with answer alongside the answer count\r",
									"// 2) can't mark another item as correct if the current correct item has an answer count > 0\r",
									"// --> check this manually right now changing values manually in the database\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"question\": \"postman-quiz-question-update\",\r\n    \"position\": 1,\r\n    \"selectionOptions\": [ \"correct option update\", \"wrong option update\", \"wrong option update2\"]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/quiz/{{poll-item-id-quiz}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"quiz",
								"{{poll-item-id-quiz}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update open text item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const cookies = pm.environment.get('cookies');\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// ---------------------- Position -------------------------------\r",
									"pm.test(\"Open text item got moved from position 2 to position 1\", () => {\r",
									"    const baseUrl = pm.environment.get('base-url');\r",
									"    const pollId = pm.globals.get('poll-id');\r",
									"    \r",
									"    pm.sendRequest({\r",
									"        url: `${baseUrl}/v1/polls/${pollId}/poll-items`,\r",
									"        method: 'GET',\r",
									"        header: {\r",
									"            \"Cookie\": cookies\r",
									"        }\r",
									"    }, function (err, response) {\r",
									"        response = response.json();\r",
									"\r",
									"        // Poll item Ids\r",
									"        const multipleChoiceId = pm.globals.get('poll-item-id-multiple-choice');\r",
									"        const quizId = pm.globals.get('poll-item-id-quiz');\r",
									"        const openTextId = pm.globals.get('poll-item-id-open-text');\r",
									"\r",
									"        // Open text item got moved from position 2 to position 1\r",
									"        pm.expect(response[0].itemId).to.equal(multipleChoiceId);\r",
									"        pm.expect(response[0].position).to.equal(3);\r",
									"\r",
									"        pm.expect(response[1].itemId).to.equal(quizId);\r",
									"        pm.expect(response[1].position).to.equal(2);\r",
									"\r",
									"        pm.expect(response[2].itemId).to.equal(openTextId);\r",
									"        pm.expect(response[2].position).to.equal(1);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"pollId\": \"{{poll-id}}\",\r\n    \"position\": 1,\r\n    \"question\": \"postman-open-text-question update\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base-url}}/v1/poll-items/open-text/{{poll-item-id-open-text}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"open-text",
								"{{poll-item-id-open-text}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete poll item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: \"localhost:8080/v1/poll-items/\" + pm.globals.get(\"poll-item-id\"),\r",
									"            method: 'GET',\r",
									"            headers: 'Cookie:'+pm.environment.get(\"cookies\")\r",
									"        }, function(error, response) {\r",
									"    pm.test(\"Poll item does not exist anymore\", function() {\r",
									"        pm.expect(response).to.have.property('code', 403)\r",
									"        pm.expect(response).to.have.property('status', 'Forbidden')\r",
									"    })\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/v1/poll-items/{{poll-item-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"poll-items",
								"{{poll-item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete poll",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: \"localhost:8080/v1/polls/\" + pm.globals.get(\"poll-id\"),\r",
									"            method: 'GET',\r",
									"            headers: 'Cookie:'+pm.environment.get(\"cookies\")\r",
									"        }, function(error, response) {\r",
									"    pm.test(\"Poll item does not exist anymore\", function() {\r",
									"        pm.expect(response).to.have.property('code', 403)\r",
									"        pm.expect(response).to.have.property('status', 'Forbidden')\r",
									"    })\r",
									"})\r",
									"\r",
									"pm.globals.unset(\"poll-id\")\r",
									"pm.globals.unset(\"poll-item-id\")\r",
									"pm.globals.unset(\"poll-item-id-multiple-choice\")\r",
									"pm.globals.unset(\"poll-item-id-open-text\")\r",
									"pm.globals.unset(\"poll-item-id-quiz\")\r",
									"pm.globals.unset(\"poll-items\")\r",
									"pm.globals.unset(\"poll-items-counter\")\r",
									"pm.globals.unset(\"cookies\")"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Cookie",
								"value": "{{cookies}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base-url}}/v1/polls/{{poll-id}}",
							"host": [
								"{{base-url}}"
							],
							"path": [
								"v1",
								"polls",
								"{{poll-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base-url",
			"value": "https://localhost:8080"
		}
	]
}