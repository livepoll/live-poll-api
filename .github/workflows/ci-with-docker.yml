# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI with Docker

on:
  push:
    branches: [ main ]
  release:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        env:
          LIVE_POLL_MYSQL_URL: ${{ secrets.API_LIVE_POLL_MYSQL_URL }}
          LIVE_POLL_MYSQL_USER: ${{ secrets.API_LIVE_POLL_MYSQL_USER }}
          LIVE_POLL_MYSQL_PASSWORD: ${{ secrets.API_LIVE_POLL_MYSQL_PASSWORD }}
          LIVE_POLL_DEV_URL: ${{ secrets.API_LIVE_POLL_DEV_URL }}
          LIVE_POLL_SERVER_URL: ${{ secrets.API_LIVE_POLL_SERVER_URL }}
          LIVE_POLL_MAIL_HOST: ${{ secrets.API_LIVE_POLL_MAIL_HOST }}
          LIVE_POLL_MAIL_PORT: ${{ secrets.API_LIVE_POLL_MAIL_PORT }}
          LIVE_POLL_MAIL_USERNAME: ${{ secrets.API_LIVE_POLL_MAIL_USERNAME }}
          LIVE_POLL_MAIL_PASSWORD: ${{ secrets.API_LIVE_POLL_MAIL_PASSWORD }}
          LIVE_POLL_JWT_AUTH_COOKIE_NAME: ${{ secrets.API_LIVE_POLL_JWT_AUTH_COOKIE_NAME }}
          LIVE_POLL_JWT_COOKIE_KEY_VALUE: ${{ secrets.API_LIVE_POLL_JWT_COOKIE_KEY_VALUE }}
          LIVE_POLL_JWT_SECRET: ${{ secrets.API_LIVE_POLL_JWT_SECRET }}
          LIVE_POLL_HTTPS_ENABLED: ${{ secrets.API_LIVE_POLL_HTTPS_ENABLED }}
          LIVE_POLL_HTTPS_CERT_PASSWORD: ${{ secrets.API_LIVE_POLL_HTTPS_CERT_PASSWORD }}
          CUCUMBER_PUBLISH_TOKEN: ${{ secrets.CUCUMBER_PUBLISH_TOKEN }}
      - name: CodeCov report deploy
        run: bash <(curl -s https://codecov.io/bash)
      - name: Prepare environment
        run: |
          sudo apt-get install --yes --no-install-recommends libxml-xpath-perl
          export ARTIFACT_ID=$(xpath -q -e "/project/artifactId/text()" pom.xml)
          echo "ARTIFACT_ID=${ARTIFACT_ID}" >> $GITHUB_ENV
          export VERSION=$(xpath -q -e "/project/version/text()" pom.xml)
          export VERSION=${VERSION//-SNAPSHOT}-$(git rev-parse --short ${GITHUB_SHA})
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: GH Packages deploy
        uses: actions/upload-artifact@v1
        with:
          name: target
          path: target
      - name: Docker build and push
        run: |
          echo ${CR_PAT} | docker login ghcr.io -u ${GITHUB_REPOSITORY_OWNER} --password-stdin
          docker build -t ghcr.io/livepoll/${ARTIFACT_ID}:${VERSION} -t ghcr.io/livepoll/${ARTIFACT_ID}:latest .
          docker push ghcr.io/livepoll/${ARTIFACT_ID}:${VERSION}
          docker push ghcr.io/livepoll/${ARTIFACT_ID}:latest
        env:
          CR_PAT: ${{ secrets.CR_PAT }}